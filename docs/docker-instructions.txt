Using Docker as an environment to develop in is a possible alternative developing locally.
If you are having trouble installing Django and Postgres/PostGIS on your local machine, you can
give Docker a try, and it might possibly make it easier to get started. Below are some instructions
on getting started with Docker for the Cruz Roja project.



1.) Install Docker/Docker Compose. This will be different depending on your operating system.

2.) Move the Dockerfile and docker-compose.yml files into the root of the project directory, where the manage.py file
is located. 

3.) Change the settings file to match the username, database name, and password, in the docker-compose.yml file.

4.) Change the ‘HOST’ in settings from ‘localhost’ to ‘db’

5.) Run docker-compose build in the directory where the Dockerfile and docker-compose files are located.


6.) Run docker-compose up    At this point, you should see that your app is running on localhost:8000, and that there are 
                             un-applied migrations. 

7.) While letting the docker-compose up process run in one terminal, open up another terminal, and run `docker ps`

8.) In the output from docker ps, locate the container id corresponding to the name "eng100l_web."

9.) Run `docker exec -i -t <container id from previous step> /bin/bash`

10.) You should now be logged in to your container in which the django project is running, and you can now type the following commands:

python manage.py migrate
python manage.py makemigrations ambulances
python manage.py migrate

11.) Now that you've migrated, you should be able to run the project again with docker-compose up. Go back to the terminal
in which `docker-compose up` has been running, and terminate it with CTRL+C. Run again `docker-compose build`,
and after that finishes, `docker-compose up`, and you you should be able to run the project. 
